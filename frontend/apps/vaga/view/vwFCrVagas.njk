{% extends "templates/base.html" %}
{% block content %}
  <div x-data="vagasForm()">
    <ol class="breadcrumb mb-2">
      <li class="breadcrumb-item active">{{ title }}</li>
    </ol>
    <div class="card-body">
      <form>
        <div class="form-group">
          <div class="row">
            <div class="col-12">
              <label for="descricao">Descrição</label>
              <input type="text" class="form-control" id="descricao" x-model="form.descricao">
            </div>
            <div class="col-12">
              <label for="tamanho">Tamanho</label>
              <!-- Máscara para o campo tamanho -->
              <input type="text" class="form-control" id="tamanho" x-model="form.tamanho" @input="formatDecimal($event)" @blur="formatDecimal($event)">
            </div>
          </div>
          <button type="button" @click="insertForm()" class="btn btn-primary mt-4">Salvar</button>
          <a href="/vagas/ManutVagas" class="btn btn-info mt-4 ml-2" role="button">Retornar</a>
        </form>
        <div class="mt-3">
          <template x-if="message">
            <div :class="messageClass" x-text="message"></div>
          </template>
        </div>
    </div>
    <script>
     function vagasForm() {
  return {
    form: {
      descricao: '',
      tamanho: ''
    },
    message: '',
    messageClass: '',
    
    // Função de formatação para o campo 'tamanho' com máscara decimal
    formatDecimal(event) {
      let value = event.target.value;

      // Remove qualquer caractere que não seja número ou ponto
      value = value.replace(/[^0-9.]/g, '');

      // Permite apenas um ponto decimal
      const parts = value.split('.');
      if (parts.length > 2) {
        value = parts[0] + '.' + parts.slice(1).join('');
      }

      // Se o número começar com um ponto, adiciona um zero à frente
      if (value.startsWith('.')) {
        value = '0' + value;
      }

      // Garantir que sempre tenha duas casas decimais
      const decimalIndex = value.indexOf('.');
      if (decimalIndex !== -1) {
        // Limita as casas decimais para no máximo 2
        value = value.substring(0, decimalIndex + 3); // Mantém até 2 casas decimais
      }

      // Se não houver ponto, adiciona ".00"
      if (!value.includes('.')) {
        value = value + '.00';
      } else {
        // Se houver ponto, garante que tenha 2 casas decimais
        const [integer, decimal] = value.split('.');
        value = `${integer}.${decimal.substring(0, 2)}`;
      }

      // Atualiza o campo de entrada
      this.form.tamanho = value;
    },

    async insertForm() {
      try {
        console.log("Valor na página:", JSON.stringify(this.form));
        const response = await fetch('/vagas/InsertVagas', {
          method: 'POST',
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify(this.form)
        });
        const result = await response.json();
        console.log("Valor na response:", response);
        console.log("Valor na result:", result);
        if (result.status == "ok") {
          alert("Vaga cadastrada com sucesso");
          this.resetForm();
        } else {
          this.message = `Erro! Não foi possível cadastrar a Vaga devido ao erro: ${result.status}`;
          this.messageClass = 'alert alert-danger';
        }
      } catch (error) {
        this.message = `Erro de conexão: ${error.message}`;
        this.messageClass = 'alert alert-danger';
      }
    },

    resetForm() {
      this.form = {
        descricao: '',
        tamanho: ''
      };
      this.message = '';
    }
  };
}
    </script>
{% endblock %}
